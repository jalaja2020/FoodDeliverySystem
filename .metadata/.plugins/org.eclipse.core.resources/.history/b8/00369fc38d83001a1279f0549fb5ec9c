package com.example.config;

import javax.sql.DataSource;

import org.springframework.batch.core.JobParameters;
import org.springframework.batch.core.JobParametersBuilder;
import org.springframework.batch.core.Step;
import org.springframework.batch.core.configuration.annotation.EnableBatchProcessing;
import org.springframework.batch.core.configuration.annotation.JobBuilderFactory;
import org.springframework.batch.core.configuration.annotation.StepBuilderFactory;
import org.springframework.batch.core.launch.JobLauncher;
import org.springframework.batch.core.launch.support.RunIdIncrementer;
import org.springframework.batch.item.ItemProcessor;
import org.springframework.batch.item.database.BeanPropertyItemSqlParameterSourceProvider;
import org.springframework.batch.item.database.JdbcBatchItemWriter;
import org.springframework.batch.item.file.FlatFileItemReader;
import org.springframework.batch.item.file.LineMapper;
import org.springframework.batch.item.file.mapping.BeanWrapperFieldSetMapper;
import org.springframework.batch.item.file.mapping.DefaultLineMapper;
import org.springframework.batch.item.file.transform.DelimitedLineTokenizer;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.beans.factory.annotation.Qualifier;
import org.springframework.beans.factory.annotation.Value;
import org.springframework.boot.autoconfigure.batch.BatchProperties.Job;
import org.springframework.context.annotation.Bean;
import org.springframework.context.annotation.Configuration;
import org.springframework.core.io.Resource;
import org.springframework.scheduling.annotation.EnableScheduling;

import com.example.entity.Vendors;
import com.example.processor.VendorItemProcessor;

@Configuration
@EnableBatchProcessing
@EnableScheduling
public class VendorItemConfig {
	  @Autowired
	    private JobBuilderFactory jobBuilderFactory;
	 
	    @Autowired
	    private StepBuilderFactory stepBuilderFactory;
	 
	    @Value("classPath:/input/FoodDeliverySystem.csv")
	    private Resource inputResource;
	 
	    @Autowired

		DataSource dataSource;
	    
		@Autowired
		JobLauncher jobLauncher;

		@Autowired
		@Qualifier("readCSVJob")
		private Job readCSVJob;
		
	    @Autowired
	    Job job;
	    
	  //@Scheduled(cron = "0 */1 * * * ?")
		public void performReadCSVFileJob() throws Exception {
			System.out.println("Starting the job: readCSVFileJob");
			JobParameters params = new JobParametersBuilder().addString("JobID", String.valueOf(System.currentTimeMillis()))
					.toJobParameters();
			jobLauncher.run(readCSVJob, params);
		}

		@Bean(name = "readCSVJob")	
		public Job readCSVFileJob() {
			return jobBuilderFactory.get("readCSVFileJob").incrementer(new RunIdIncrementer()).start(readCSVFileStep()).build();
		}
	 
	    @Bean
	    public Step step() {
	        return stepBuilderFactory
	                .get("step")
	                .<Vendors, Vendors>chunk(5)
	                .reader(reader())
	                .processor(processor())
	                .writer(writer())
	                .build();
	    }
	     
	    @Bean
	    public ItemProcessor<Vendors, Vendors> processor() {
	        return new VendorItemProcessor();
	    }
	     
	    @Bean
	    public FlatFileItemReader<Vendors> reader() {
	        FlatFileItemReader<Vendors> itemReader = new FlatFileItemReader<Vendors>();
	        itemReader.setLineMapper(lineMapper());
	        itemReader.setLinesToSkip(1);
	        itemReader.setResource(inputResource);
	        return itemReader;
	    }
	 
	    @Bean
	    public LineMapper<Vendors> lineMapper() {
	        DefaultLineMapper<Vendors> lineMapper = new DefaultLineMapper<Vendors>();
	        DelimitedLineTokenizer lineTokenizer = new DelimitedLineTokenizer();
	        lineTokenizer.setNames(new String[] { "VendorId", "VendorName" });
	        lineTokenizer.setIncludedFields(new int[] { 0, 1 });
	        BeanWrapperFieldSetMapper<Vendors> fieldSetMapper = new BeanWrapperFieldSetMapper<Vendors>();
	        fieldSetMapper.setTargetType(Vendors.class);
	        lineMapper.setLineTokenizer(lineTokenizer);
	        lineMapper.setFieldSetMapper(fieldSetMapper);
	        return lineMapper;
	    }
	 
	    @Bean
	    public JdbcBatchItemWriter<Vendors> writer() {
	        JdbcBatchItemWriter<Vendors> itemWriter = new JdbcBatchItemWriter<Vendors>();
	        itemWriter.setDataSource(dataSource);
	        itemWriter.setSql("INSERT INTO VENDORS (VENDORID, VENDOR_NAME) VALUES (:id, :vendorName)");
	        itemWriter.setItemSqlParameterSourceProvider(new BeanPropertyItemSqlParameterSourceProvider<Vendors>());
	        return itemWriter;
	    }
}
